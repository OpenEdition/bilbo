# -*- coding: utf-8 -*-
'''
Created on 18 avr. 2012

@author: Young-Min Kim, Jade Tavernier
'''

import subprocess

from mypkg.format.Extract_crf import Extract_crf
from mypkg.reference.ListReferences import ListReferences 
from mypkg.output.GenerateXml import GenerateXml


class CRF(object):
	'''
	CRF object is created in a Bilbo object
	CRF model learning and test
	'''

	def __init__(self, dirResult):
		'''
		Attributes
		----------
		generateXml : GenerateXml
		dirResult : string
			directory for result files
		'''
		self.generateXml = GenerateXml()
		self.dirResult = dirResult
		
		
	def prepareTrain(self, corpus, typeCorpus, fileRes, tr=-1, extOption=-1, indices=""):
		'''
		Prepare CRF training data
		
		Parameters
		----------
		corpus : Corpus
		typeCorpus : int, {1, 2, 3}
			1 : corpus 1, 2 : corpus 2...
		fileRes : string
			output file name
		tr : int, {1, 0, -1, -2} (default -1)
			check if training or test data
			1 : train, 0 : test without label, -1 : test with label, -2 : test only label 
		extOption : int, {-1, 1, ...} (default -1)
			extra option for crf training/test data format
			check if data is internal data, if yes we'll use a modified index for corpus type 2
			-1 : data format for SVM 
			1 : data format for normal CRF training/test data 
			2-5 : (not yet provided)
		indices : string
			valid reference index file after SVM classification (for corpus 2)
		'''	
		listReferences = corpus.getListReferences(typeCorpus)
		newListReferences = ListReferences(listReferences, typeCorpus)
		extractor = Extract_crf()
		nbRef = corpus.nbReference(typeCorpus)

		'generation of training index for each reference'
		extractor.randomgen(newListReferences, 1)
				
		'if corpus type 2 and extOption=1, we use a modified index list'
		if typeCorpus == 2 and extOption == 1:
			'modify the indices to eliminate the reference (or not print the reference) classified as non-bibl'
			
			extractor.extractorIndices("model/corpus2/svm_revues_predictions_training", newListReferences) 
			extractor.extractor(1, nbRef, self.dirResult+fileRes, newListReferences, tr, extOption)
			
		else: # typeCorpus == 1 or (typeCorpus == 2 and isFrstExt == -1)
			########## SOURCE DATA EXTRACTION FOR SVM OR CORPUS 1 (BUT THESE ARE DIFFERENT !!!)
			extractor.extractor(typeCorpus, nbRef, self.dirResult+fileRes, newListReferences, tr, extOption)
		
		return newListReferences
	

	def prepareTest(self, corpus, typeCorpus, indiceSvm = 0, indices=""):
		'''
		Prepare CRF test data
		
		Parameters
		----------
		corpus : Corpus
		typeCorpus : int, {1, 2, 3}
			1 : corpus 1, 2 : corpus 2...
		indiceSvm : int, {0, -1, 2}
			0 : normal(corpus 1)
			-1 : data04SVM (corpus2),
			2 : external data => svm isn't called
		indices : int 
			valid reference index file after SVM classification (corpus 2)
		'''
		listReferences = corpus.getListReferences(typeCorpus)
		listReferencesObj = ListReferences(listReferences, typeCorpus)
		
		extractor = Extract_crf()
		nbRef = corpus.nbReference(typeCorpus)
		
		'generation of test index for each reference'
		extractor.randomgen(ListReferences(listReferencesObj.getReferences(),typeCorpus), 0)
		
		if indiceSvm == -1:
			extractor.extractor(typeCorpus, nbRef, self.dirResult+"data04SVM_ori.txt", ListReferences(listReferencesObj.getReferences(),typeCorpus))
		else: 
			'file for CRF training'
			if typeCorpus == 2 and indiceSvm != 2 :
				extractor.extractorIndices4new("model/corpus2/svm_revues_predictions_new", ListReferences(listReferencesObj.getReferences(),typeCorpus))
			
			
			extractor.extractor(1, nbRef, self.dirResult+"testdatawithlabel_CRF.txt",ListReferences(listReferencesObj.getReferences(),typeCorpus), -1, 1)
			extractor.extractor(1, nbRef, self.dirResult+"testdataonlylabel_CRF.txt",ListReferences(listReferencesObj.getReferences(),typeCorpus), -2, 1)
			
			extractor.extractor(1, nbRef, self.dirResult+"testdata_CRF.txt",ListReferences(listReferencesObj.getReferences(),typeCorpus), 0, 1)

		return ListReferences(listReferencesObj.getReferences(),typeCorpus)
		


	def runTrain(self, directory, fichier) :
		'''
		Run CRF training module from Mallet software
		
		Parameters
		----------
		directory : string 
			directory where we save the model
		fichier : string
			filename that has been generated by preprareTrain
		'''
		command = 'java -cp  \"dependencies/mallet/class:dependencies/mallet/lib/mallet-deps.jar\" cc.mallet.fst.SimpleTagger  --train true --model-file '+directory+'revuescrf '+self.dirResult+fichier+' >> '+directory+'log_mallet.txt'
		process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
		process.wait()	

		
		return
	


	def runTest(self, directory, fichier) :
		'''
		Run CRF test module from Mallet software to annotate new data
		
		Parameters
		----------
		directory : string 
			directory where we save the model
		fichier : string
			filename that has been generated by preprareTrain
		'''
		command = 'java -cp  \"dependencies/mallet/class:dependencies/mallet/lib/mallet-deps.jar\" cc.mallet.fst.SimpleTagger  --model-file '+directory+'revuescrf '+self.dirResult+fichier+' > '+self.dirResult+'testEstCRF.txt '
		process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
		process.wait()
	
		self.generateXml.simpleComp(self.dirResult+"testdata_CRF.txt", self.dirResult+'testEstCRF.txt', 2, self.dirResult+'testEstCRF.xml')	
		return
	
	
	
	def postProcessTest(self, fnameCRFresult, fnameCRFtoAdd, refsAfterSVM):
		
		
		fbefore = open(self.dirResult+fnameCRFresult, 'r')
		fafter = open(self.dirResult+fnameCRFtoAdd, 'w')
		
		for reference in refsAfterSVM :
			if reference.train != -1 :
				#print 'train is bibl'
				line = fbefore.readline()
				while (len(line.split()) > 0) :
					fafter.write(str(line))
					line = fbefore.readline()
				fafter.write("\n")
			else : 
				#print 'train is nonbibl'
				line = fbefore.readline()
				while (len(line.split()) > 0) :
					fafter.write("nonbibl \n")
					line = fbefore.readline()
				fafter.write("\n")
		fafter.close()
		fbefore.close()
		
		return

