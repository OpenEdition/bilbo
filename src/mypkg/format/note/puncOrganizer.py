#!/usr/bin/env python
# encoding: utf-8
"""
puncOrganizerV3.py

Created by Young-Min Kim on 2011-06-12.

Betweeen dataGenerator.py and extractor.py, this file reorganizes
punctuation marks in the result.txt file generated by dataGenerator.
In this first version, we extract all the punctuation marks, which
have been attatched to tokens, and regard them also as independent
tokens. The existing tagged marks with manual operation are labled
as <c> and the newly extracted marks are labeled as <punc>. The 
latters are comparatively less important among punctuation marks.
+
When all the marks are labelled as <c>, it works better.
+
Add LOCAL FEATURES from their FORM
ALLNUMBERS
NUMBERS
NUMBERS DASH
ALLCAP
FIRSTCAP
ALLSMALL
INITIAL
POSSEDITOR (ed, eds, ed., eds.)
+
www.
http
url


"""

import sys
import os
import re
import string
import codecs

from mypkg.ressources.BeautifulSoup import BeautifulSoup
from mypkg.ressources.BeautifulSoup import Tag

special =  {'«':0, '»':0, '“':0, '”':0, '–':0}

paren = {'(':0, '{':0, '[':0, ')':0, '}':0, ']':0, '«':0, '“':0, '»':0, '”':0}
link = {':':0, '=':0, '_':0, '|':0, '~':0, '-':0, '–':0}


def reorganizing(fname) :

	preline_len = 100
	
	for iline in open (fname, 'r') :
		line = iline.split('++')
	
		if len(line[0].split()) != 0 :
			if line[0].split()[0] != '********in********' and line[0].split()[0] != '!NONE!':
			
				tmp_strs = (line[len(line)-1].split('\n')[0]).split()
				tmp_strs.reverse()
				st = tmp_strs[0]
				
				input_str = line[0].split()[0]
				new_str = ''
				
				#posseditor check
				editor_ck = 0
				retrn_str = editorCheck(input_str)
				if not retrn_str == '' :
					new_str = input_str
					input_str = ''
					init_ck = 0
					editor_ck = 1
				
				#initial check
				init_ck = 0
				if editor_ck == 0 :
					retrn_str = initCheck(input_str)
					if not retrn_str == '' :
						new_str = retrn_str
						input_str = re.sub(retrn_str, '', input_str)
						init_ck = 1
				
				#posspage check
				page_ck = 0
				retrn_str = pageCheck(input_str)
				if not retrn_str == '' :
					new_str = input_str
					input_str = ''
					page_ck = 1
								
				#http, www check
				web_ck = 0
				retrn_str = refCheck(input_str)
				if not retrn_str == '' :
					new_str = input_str
					input_str = ''
					web_ck = 1
				
				#tokenization
				for c in input_str :
					if c in  ".,():{}[]!?#$%\*+/<=>@^_|~" :# not including "-"
						if new_str != '' :
							feat_str = ''
							feat_str = featureCheck(new_str)
							if init_ck == 1 : feat_str = feat_str+' initial'
							#special char check added 
							if special.has_key(new_str) :#####added 190911
								print new_str+' ++ '+line[1]+feat_str+' ++ c '+line[2],####added 190911
							else :####added 190911
								print new_str+' ++ '+line[1]+feat_str+' ++ '+line[2],
							preline_len = 100
						print c+' ++ '+line[1]+'++ '+line[2].split('\n')[0]+' c' # all puncutation marks are <c> 
						preline_len = 100
						new_str = ''
					else :
						new_str = new_str+c
				
				if not new_str == '' :
					feat_str = ''
					
					feat_str = featureCheck(new_str)
					if init_ck == 1 : feat_str = feat_str+' initial'
					if editor_ck == 1 : feat_str = ' nonimpcap posseditor'
					if web_ck == 1 : feat_str = feat_str+' weblink'
					if page_ck == 1 : feat_str = feat_str+' posspage'
					
					if special.has_key(new_str) :
						print new_str+' ++ '+line[1]+feat_str+' ++ c '+line[2],
						preline_len = 100
					else :
						print new_str+' ++ '+line[1]+feat_str+' ++ '+line[2],
						preline_len = 100
								
			else :
				print iline,
				preline_len = len(iline)
		else :
			if preline_len != 0 : print iline,
			preline_len = 0

	return


def initCheck(input_str) :
	init1 = re.compile('^[A-Z][a-z]?\.-?[A-Z]?[a-z]?\.?')
	init2 = re.compile('^[A-Z][a-z]?-[A-Z]?[a-z]?\.?')
	p1 = init1.findall(input_str)
	p2 = init2.findall(input_str)
	
	retrn_str = ''
	if p1 : 
		#print '################',p1[0]
		retrn_str = p1[len(p1)-1]
	elif p2 : 
		#print '################',p2[0]
		retrn_str = p2[len(p1)-1]
		
	return retrn_str


def refCheck(input_str) :
	ref1 = re.compile('^http')
	ref2 = re.compile('^www.')
	ref3 = re.compile('^url')
	p1 = ref1.findall(input_str)
	p2 = ref2.findall(input_str)
	p3 = ref3.findall(input_str)
	
	retrn_str = ''
	if p1 or p2 or p3 :
		retrn_str = 'positive'
	
	return retrn_str
	

def editorCheck(input_str) :
	retrn_str = ''
	tmp_str = input_str.lower()
	if tmp_str == 'ed' or tmp_str == 'eds' or tmp_str == 'ed.' or tmp_str == 'eds.' :
		retrn_str = 'positive'
	
	return retrn_str
	
def pageCheck(input_str) :
	retrn_str = ''
	if input_str == 'pp' or input_str == 'pp.' or input_str == 'p' or input_str == 'p.' :
		retrn_str = 'positive'
	
	return retrn_str
	

def featureCheck(new_str) :

	retrn_str = ''

	#number
	numbers = re.compile('\d+')
	if (numbers.search(new_str)) :
		retrn_str = 'numbers'
		
	num = numbers.findall(new_str)
	if len(num) == 1 and num[0] == new_str :
		retrn_str = 'allnumbers'
		if len(num[0]) == 4 : 
			retrn_str = 'allnumbers fourdigit'
		elif len(num[0]) == 3 : 
			retrn_str = 'allnumbers threedigit'
		elif len(num[0]) == 2 : 
			retrn_str = 'allnumbers twodigit'
		elif len(num[0]) == 1 : 
			retrn_str = 'allnumbers onedigit'
		else : retrn_str = 'allnumbers'
		
	elif len(num) > 1 :
		if (re.compile('-')).search(new_str) :
			retrn_str = retrn_str+' dash'
		digitck = 0
		for nn in num :
			if len(nn) == 4 :  digitck += 1
		if digitck == len(num) :
			retrn_str = retrn_str+' fourdigit'
	
	#allcapital
	allnum = re.compile('^allnumbers')
	num = re.compile('^numbers')
	if not allnum.findall(retrn_str) :
		if not num.findall(retrn_str) :		#if retrn_str != 'numbers' and retrn_str != 'numbers dash' :
			if new_str.upper() == new_str :
				retrn_str = retrn_str+' allcap'
			elif new_str[0].upper() == new_str[0] :
				retrn_str = retrn_str+' firstcap'
			elif new_str.lower() == new_str :
				retrn_str = retrn_str+' allsmall'
			else : retrn_str = retrn_str+' nonimpcap'
			
	#guillemot check
	if new_str.find('«') >= 0 : retrn_str = ' guillemot_left'		# eliminate previously detected features
	if new_str.find('»') >= 0 : retrn_str = ' guillemot_right'
	
	#quote check
	if new_str.find('“') >= 0 : retrn_str = ' quote_left'
	if new_str.find('”') >= 0 : retrn_str = ' quote_right'

	
	return retrn_str


def main() :
	
	if len (sys.argv) != 2 :
		print 'python puncOrganizeV3.py (filename)'
		sys.exit (1)
		
	fname = str(sys.argv[1])
	reorganizing(fname)
	



if __name__ == '__main__':
	main()

